generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                           String                 @id @default(cuid())
  email                        String                 @unique
  name                         String?
  firstName                    String?
  lastName                     String?
  phone                        String?
  dateOfBirth                  DateTime?
  pronouns                     String?
  profilePhotoUrl              String?
  hashedPassword               String
  role                         Role                   @default(VOLUNTEER)
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?
  medicalConditions            String?
  willingToProvideReference    Boolean                @default(false)
  howDidYouHearAboutUs         String?
  availableDays                String?
  availableLocations           String?
  emailNewsletterSubscription  Boolean                @default(true)
  notificationPreference       NotificationPreference @default(EMAIL)
  volunteerAgreementAccepted   Boolean                @default(false)
  healthSafetyPolicyAccepted   Boolean                @default(false)
  profileCompleted             Boolean                @default(false)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  signups                      Signup[]
  achievements                 UserAchievement[]
  ledGroupBookings             GroupBooking[]         @relation("GroupLeader")
  groupInvitationsSent         GroupInvitation[]
}

model ShiftType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shifts      Shift[]
}

model Shift {
  id            String         @id @default(cuid())
  shiftTypeId   String
  start         DateTime
  end           DateTime
  location      String?
  capacity      Int
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  shiftType     ShiftType      @relation(fields: [shiftTypeId], references: [id])
  signups       Signup[]
  groupBookings GroupBooking[]
}

model Signup {
  id             String        @id @default(cuid())
  userId         String
  shiftId        String
  status         SignupStatus  @default(CONFIRMED)
  groupBookingId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shift          Shift         @relation(fields: [shiftId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  groupBooking   GroupBooking? @relation(fields: [groupBookingId], references: [id])

  @@unique([userId, shiftId])
}

model Achievement {
  id          String              @id @default(cuid())
  name        String              @unique
  description String
  category    AchievementCategory
  icon        String
  criteria    String
  points      Int                 @default(0)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

model GroupBooking {
  id          String              @id @default(cuid())
  name        String              // e.g., "Smith Family", "Acme Corp Team"
  description String?             // Optional group description
  shiftId     String
  leaderId    String              // Group leader (creator)
  maxMembers  Int                 @default(10) // Configurable limit
  status      GroupBookingStatus  @default(PENDING)
  notes       String?             // Admin/leader notes
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  shift       Shift               @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  leader      User                @relation("GroupLeader", fields: [leaderId], references: [id])
  signups     Signup[]            // Individual signups linked to this group
  invitations GroupInvitation[]   // Pending invitations
  
  @@unique([shiftId, leaderId]) // One group per leader per shift
}

model GroupInvitation {
  id             String                @id @default(cuid())
  groupBookingId String
  email          String
  invitedById    String
  status         GroupInvitationStatus @default(PENDING)
  message        String?               // Personal message from inviter
  token          String                @unique @default(cuid()) // For invitation links
  expiresAt      DateTime              // Invitation expiry (7 days)
  assignedShiftIds String[]            // Array of shift IDs this member is assigned to
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  
  // Relations
  groupBooking   GroupBooking          @relation(fields: [groupBookingId], references: [id], onDelete: Cascade)
  invitedBy      User                  @relation(fields: [invitedById], references: [id])
  
  @@unique([groupBookingId, email])
}

enum Role {
  VOLUNTEER
  ADMIN
}

enum SignupStatus {
  PENDING
  CONFIRMED
  WAITLISTED
  CANCELED
}

enum NotificationPreference {
  EMAIL
  SMS
  BOTH
  NONE
}

enum AchievementCategory {
  MILESTONE
  DEDICATION
  SPECIALIZATION
  COMMUNITY
  IMPACT
}

enum GroupBookingStatus {
  PENDING    // Awaiting admin review
  CONFIRMED  // Approved by admin
  WAITLISTED // On waitlist as a group
  CANCELED   // Canceled by leader or admin
  PARTIAL    // Some members approved, others not
}

enum GroupInvitationStatus {
  PENDING  // Invitation sent, awaiting response
  ACCEPTED // User accepted and joined (signup created)
  DECLINED // User declined invitation
  EXPIRED  // Invitation expired
  CANCELED // Canceled by leader
}
