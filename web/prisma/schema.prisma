generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                           String                 @id @default(cuid())
  email                        String                 @unique
  name                         String?
  firstName                    String?
  lastName                     String?
  phone                        String?
  dateOfBirth                  DateTime?
  pronouns                     String?
  profilePhotoUrl              String?
  hashedPassword               String
  role                         Role                   @default(VOLUNTEER)
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?
  medicalConditions            String?
  willingToProvideReference    Boolean                @default(false)
  howDidYouHearAboutUs         String?
  availableDays                String?
  availableLocations           String?
  emailNewsletterSubscription  Boolean                @default(true)
  notificationPreference       NotificationPreference @default(EMAIL)
  volunteerAgreementAccepted   Boolean                @default(false)
  healthSafetyPolicyAccepted   Boolean                @default(false)
  profileCompleted             Boolean                @default(false)
  
  // Shift shortage notification preferences
  receiveShortageNotifications Boolean                @default(true)
  shortageNotificationTypes    String[]               @default([]) // Array of shift type IDs they want notifications for, empty means all types
  maxNotificationsPerWeek      Int                    @default(3)
  
  // Migration invitation tracking
  isMigrated                   Boolean                @default(false)
  migrationInvitationSent      Boolean                @default(false)
  migrationInvitationSentAt    DateTime?
  migrationInvitationCount     Int                    @default(0)
  migrationLastSentAt          DateTime?
  migrationInvitationToken     String?                @unique
  migrationTokenExpiresAt      DateTime?
  
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  signups                      Signup[]
  achievements                 UserAchievement[]
  ledGroupBookings             GroupBooking[]         @relation("GroupLeader")
  groupInvitationsSent         GroupInvitation[]
  
  // Friend system relations
  friendships                  Friendship[]           @relation("UserFriendships")
  friendOf                     Friendship[]           @relation("FriendFriendships")
  initiatedFriendships         Friendship[]           @relation("InitiatedFriendships")
  sentFriendRequests           FriendRequest[]
  
  // Privacy settings
  friendVisibility             FriendVisibility       @default(FRIENDS_ONLY)
  allowFriendRequests          Boolean                @default(true)
  
  // Notifications
  notifications                Notification[]
  
  // Restaurant Manager
  restaurantManager            RestaurantManager?
  
  // Regular volunteer relation
  regularVolunteer             RegularVolunteer?
  
  // Email notifications
  emailNotifications           EmailNotification[]
  notificationGroupMembers     NotificationGroupMember[]
}

model ShiftType {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  shifts           Shift[]
  regularVolunteers RegularVolunteer[]
}

model Shift {
  id            String         @id @default(cuid())
  shiftTypeId   String
  start         DateTime
  end           DateTime
  location      String?
  capacity      Int
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  shiftType     ShiftType      @relation(fields: [shiftTypeId], references: [id])
  signups       Signup[]
  groupBookings GroupBooking[]
  emailNotifications EmailNotification[]
}

model Signup {
  id             String         @id @default(cuid())
  userId         String
  shiftId        String
  status         SignupStatus   @default(CONFIRMED)
  groupBookingId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Cancellation tracking - only tracks cancellations from CONFIRMED status
  canceledAt     DateTime?      // When a CONFIRMED signup was canceled
  previousStatus String?        // Status before cancellation (only set when canceling from CONFIRMED)
  cancellationReason String?     // Optional reason for cancellation
  
  shift          Shift          @relation(fields: [shiftId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  groupBooking   GroupBooking?  @relation(fields: [groupBookingId], references: [id])
  regularSignup  RegularSignup? // One-to-one relation with RegularSignup

  @@unique([userId, shiftId])
  @@index([status, canceledAt])
  @@index([userId, canceledAt])
}

model Achievement {
  id          String              @id @default(cuid())
  name        String              @unique
  description String
  category    AchievementCategory
  icon        String
  criteria    String
  points      Int                 @default(0)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

model GroupBooking {
  id          String              @id @default(cuid())
  name        String              // e.g., "Smith Family", "Acme Corp Team"
  description String?             // Optional group description
  shiftId     String
  leaderId    String              // Group leader (creator)
  maxMembers  Int                 @default(10) // Configurable limit
  status      GroupBookingStatus  @default(PENDING)
  notes       String?             // Admin/leader notes
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  shift       Shift               @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  leader      User                @relation("GroupLeader", fields: [leaderId], references: [id])
  signups     Signup[]            // Individual signups linked to this group
  invitations GroupInvitation[]   // Pending invitations
  
  @@unique([shiftId, leaderId]) // One group per leader per shift
}

model GroupInvitation {
  id             String                @id @default(cuid())
  groupBookingId String
  email          String
  invitedById    String
  status         GroupInvitationStatus @default(PENDING)
  message        String?               // Personal message from inviter
  token          String                @unique @default(cuid()) // For invitation links
  expiresAt      DateTime              // Invitation expiry (7 days)
  assignedShiftIds String[]            // Array of shift IDs this member is assigned to
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  
  // Relations
  groupBooking   GroupBooking          @relation(fields: [groupBookingId], references: [id], onDelete: Cascade)
  invitedBy      User                  @relation(fields: [invitedById], references: [id])
  
  @@unique([groupBookingId, email])
}

enum Role {
  VOLUNTEER
  ADMIN
}

enum SignupStatus {
  PENDING
  REGULAR_PENDING  // Auto-generated signup for regular volunteers
  CONFIRMED
  WAITLISTED
  CANCELED
  NO_SHOW
}

enum NotificationPreference {
  EMAIL
  SMS
  BOTH
  NONE
}

enum AchievementCategory {
  MILESTONE
  DEDICATION
  SPECIALIZATION
  COMMUNITY
  IMPACT
}

enum GroupBookingStatus {
  PENDING    // Awaiting admin review
  CONFIRMED  // Approved by admin
  WAITLISTED // On waitlist as a group
  CANCELED   // Canceled by leader or admin
  PARTIAL    // Some members approved, others not
}

enum GroupInvitationStatus {
  PENDING  // Invitation sent, awaiting response
  ACCEPTED // User accepted and joined (signup created)
  DECLINED // User declined invitation
  EXPIRED  // Invitation expired
  CANCELED // Canceled by leader
}

model Friendship {
  id          String           @id @default(cuid())
  userId      String
  friendId    String
  status      FriendshipStatus @default(PENDING)
  initiatedBy String           // Who sent the friend request
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  user        User             @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend      User             @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  initiator   User             @relation("InitiatedFriendships", fields: [initiatedBy], references: [id])
  
  @@unique([userId, friendId])
  @@index([userId, status])
  @@index([friendId, status])
}

model FriendRequest {
  id          String                @id @default(cuid())
  fromUserId  String
  toEmail     String                // Can be existing user email or new invitation
  message     String?               // Personal message from requester
  token       String                @unique @default(cuid()) // For invitation links
  status      FriendRequestStatus   @default(PENDING)
  expiresAt   DateTime              // Request expiry (30 days)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  
  // Relations
  fromUser    User                  @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  
  @@unique([fromUserId, toEmail])
}

enum FriendshipStatus {
  PENDING     // Friend request sent, awaiting acceptance
  ACCEPTED    // Friendship established
  BLOCKED     // User blocked this friend
}

enum FriendRequestStatus {
  PENDING     // Request sent, awaiting response
  ACCEPTED    // Request accepted, friendship created
  DECLINED    // Request declined
  EXPIRED     // Request expired
  CANCELED    // Canceled by sender
}

enum FriendVisibility {
  PUBLIC        // Anyone can see user's shift activity
  FRIENDS_ONLY  // Only friends can see shift activity
  PRIVATE       // No one can see shift activity
}

model Notification {
  id             String           @id @default(cuid())
  userId         String           // Recipient of the notification
  type           NotificationType
  title          String           // e.g., "New friend request", "Shift confirmed"
  message        String           // e.g., "John Doe sent you a friend request"
  isRead         Boolean          @default(false)
  actionUrl      String?          // Optional URL to navigate to when clicked
  relatedId      String?          // ID of related entity (friendRequestId, shiftId, etc.)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
}

enum NotificationType {
  FRIEND_REQUEST_RECEIVED  // Someone sent you a friend request
  FRIEND_REQUEST_ACCEPTED  // Someone accepted your friend request
  SHIFT_CONFIRMED         // Your shift signup was confirmed
  SHIFT_WAITLISTED        // Your shift signup was waitlisted
  SHIFT_CANCELED          // Your shift was canceled by admin
  GROUP_INVITATION        // You were invited to a group booking
  ACHIEVEMENT_UNLOCKED    // You unlocked a new achievement
  SHIFT_CANCELLATION_MANAGER // Volunteer canceled shift - notify managers
}

model RestaurantManager {
  id                   String   @id @default(cuid())
  userId               String   @unique
  locations            String[] // Array of location strings they manage
  receiveNotifications Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RegularVolunteer {
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftTypeId     String
  shiftType       ShiftType       @relation(fields: [shiftTypeId], references: [id])
  location        String          // Wellington, Glenn Innes, Onehunga
  frequency       Frequency       @default(WEEKLY)
  availableDays   String[]        // Array of day names: ["Monday", "Wednesday", "Friday"]
  isActive        Boolean         @default(true)
  isPausedByUser  Boolean         @default(false) // User-controlled pause
  pausedUntil     DateTime?       // Optional pause end date
  notes           String?         // Admin notes about this regular assignment
  volunteerNotes  String?         // Volunteer's own notes/preferences
  createdAt       DateTime        @default(now())
  createdBy       String          // Admin who created this
  updatedAt       DateTime        @updatedAt
  lastModifiedBy  String?         // Track who last modified (admin or volunteer)
  
  // Track auto-generated signups
  autoSignups     RegularSignup[]
  
  @@index([userId, isActive])
  @@index([shiftTypeId, location, isActive])
}

model RegularSignup {
  id                 String           @id @default(cuid())
  regularVolunteerId String
  regularVolunteer   RegularVolunteer @relation(fields: [regularVolunteerId], references: [id], onDelete: Cascade)
  signupId           String           @unique
  signup             Signup           @relation(fields: [signupId], references: [id], onDelete: Cascade)
  skipReason         String?          // If admin skips this auto-signup
  createdAt          DateTime         @default(now())
  
  @@index([regularVolunteerId])
}

enum Frequency {
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

// Email notification tracking
model EmailNotification {
  id               String                @id @default(cuid())
  type             EmailNotificationType
  subject          String
  htmlContent      String                @db.Text
  textContent      String?               @db.Text
  recipientCount   Int
  sentAt           DateTime              @default(now())
  sentBy           String                // Admin user ID who sent it
  shiftId          String?               // Related shift if applicable
  groupId          String?               // Related notification group if used
  status           EmailStatus           @default(SENT)
  campaignId       String?               // Campaign Monitor campaign ID
  metadata         Json?                 // Additional tracking data
  createdAt        DateTime              @default(now())
  
  // Relations
  sentByUser       User                  @relation(fields: [sentBy], references: [id])
  shift            Shift?                @relation(fields: [shiftId], references: [id])
  group            NotificationGroup?    @relation(fields: [groupId], references: [id])
  recipients       EmailRecipient[]
  
  @@index([type, sentAt])
  @@index([shiftId])
}

model EmailRecipient {
  id                 String            @id @default(cuid())
  notificationId     String
  recipientEmail     String
  recipientName      String?
  status             RecipientStatus   @default(SENT)
  openedAt           DateTime?
  clickedAt          DateTime?
  unsubscribedAt     DateTime?
  bouncedAt          DateTime?
  createdAt          DateTime          @default(now())
  
  notification       EmailNotification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@index([notificationId, status])
  @@index([recipientEmail])
}

// Saved filter groups for notifications
model NotificationGroup {
  id                String                    @id @default(cuid())
  name              String                    @unique
  description       String?
  filters           Json                      // Stored filter criteria
  isActive          Boolean                   @default(true)
  createdBy         String
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  members           NotificationGroupMember[]
  emailNotifications EmailNotification[]
}

model NotificationGroupMember {
  id          String            @id @default(cuid())
  groupId     String
  userId      String
  addedAt     DateTime          @default(now())
  
  group       NotificationGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

// Email templates
model EmailTemplate {
  id          String              @id @default(cuid())
  name        String              @unique
  type        EmailTemplateType
  subject     String
  htmlContent String              @db.Text
  textContent String?             @db.Text
  variables   String[]            // List of variable names used in template
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   String
}

enum EmailNotificationType {
  SHIFT_SHORTAGE        // Main type for shortage notifications
  SHIFT_REMINDER       // General shift reminder
  SHIFT_CANCELED       // Shift cancellation notice
  VOLUNTEER_WELCOME    // Welcome email for new volunteers
  CUSTOM               // Custom admin-sent notification
}

enum EmailStatus {
  DRAFT
  QUEUED
  SENT
  FAILED
  PARTIALLY_SENT
}

enum RecipientStatus {
  SENT
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

enum EmailTemplateType {
  SHIFT_SHORTAGE
  SHIFT_REMINDER
  SHIFT_CANCELED
  WELCOME
  CUSTOM
}
