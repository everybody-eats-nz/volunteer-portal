name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Playwright Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: volunteer-portal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd web
          npx playwright install --with-deps chromium

      - name: Setup test database
        run: |
          cd web
          cp .env.example .env
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run Playwright tests
        run: |
          cd web
          npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --project=chromium --reporter=blob

      - name: Upload blob report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blob-report-${{ matrix.shard }}
          path: web/blob-report/
          retention-days: 1

  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge test reports
        run: |
          cd web
          npx playwright merge-reports --reporter=html ../all-blob-reports

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: web/playwright-report/
          retention-days: 30

      - name: Generate coverage report
        if: github.event_name == 'pull_request'
        working-directory: web
        run: |
          # Extract test results and create a coverage report
          echo "# Test Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          
          # Count test files and results
          TEST_COUNT=$(find tests/e2e -name "*.spec.ts" -o -name "*.test.ts" | wc -l)
          echo "- **Total test files**: $TEST_COUNT" >> coverage-report.md
          
          # List test files covered
          echo "" >> coverage-report.md
          echo "## Test Files Executed" >> coverage-report.md
          find tests/e2e -name "*.spec.ts" -o -name "*.test.ts" | while read file; do
            echo "- \`$(basename $file)\`" >> coverage-report.md
          done
          
          echo "" >> coverage-report.md
          echo "## Pages/Components Tested" >> coverage-report.md
          echo "Based on e2e tests, the following application areas are covered:" >> coverage-report.md
          
          # Analyze test files for page coverage
          grep -r "page\.goto\|visit" tests/e2e/ --include="*.ts" | \
            sed 's/.*page\.goto[^"]*["'"'"']\([^"'"'"']*\)["'"'"'].*/- \1/' | \
            sort | uniq >> coverage-report.md || echo "- No specific page visits found" >> coverage-report.md

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let coverageReport = '';
            try {
              coverageReport = fs.readFileSync('web/coverage-report.md', 'utf8');
            } catch (error) {
              coverageReport = '# Test Coverage Report\n\nNo coverage report generated.';
            }
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing coverage comment
            const existingComment = comments.find(comment => 
              comment.body.includes('🧪 Test Coverage Report') && 
              comment.user.type === 'Bot'
            );
            
            const commentBody = `## 🧪 Test Coverage Report
            
            ${coverageReport}
            
            ---
            *This report shows which test files were executed and provides insight into application coverage through e2e tests.*`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  summary:
    if: always()
    needs: [test, merge-reports]
    runs-on: ubuntu-latest
    name: Test Summary
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.merge-reports.result }}" == "failure" ]]; then
            echo "❌ Tests failed"
            exit 1
          elif [[ "${{ needs.test.result }}" == "cancelled" || "${{ needs.merge-reports.result }}" == "cancelled" ]]; then
            echo "🟡 Tests cancelled"
            exit 1
          else
            echo "✅ All tests passed"
          fi
