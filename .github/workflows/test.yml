name: Test

on:
  push:
    branches: [main]
    paths: ["web/**", ".github/workflows/test.yml"]
  pull_request:
    branches: [main]
    paths: ["web/**", ".github/workflows/test.yml"]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Playwright Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: volunteer-portal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Get Playwright version
        run: |
          cd web
          echo "PLAYWRIGHT_VERSION=$(npx playwright --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)" >> $GITHUB_ENV

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        run: |
          cd web
          npx playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/volunteer-portal
          DIRECT_URL: postgresql://postgres:password@localhost:5432/volunteer-portal
          TZ: Pacific/Auckland
        run: |
          cd web
          cp .env.example .env
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
          npx prisma migrate deploy
          npx prisma db seed

      - name: Setup Babel config for coverage
        if: github.event_name == 'pull_request'
        run: |
          cd web
          cp .babelrc.coverage.js .babelrc.js

      - name: Run Playwright tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/volunteer-portal
          DIRECT_URL: postgresql://postgres:password@localhost:5432/volunteer-portal
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000
          TZ: Pacific/Auckland
          COVERAGE: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
          NODE_ENV: ${{ github.event_name == 'pull_request' && 'test' || 'production' }}
        run: |
          cd web
          npx playwright test --shard=${{ matrix.shard }}/${{ strategy.job-total }} --project=chromium --reporter=blob

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request' && always()
        with:
          name: coverage-${{ matrix.shard }}
          path: web/.nyc_output/
          retention-days: 1

      - name: Clean up Babel config
        if: github.event_name == 'pull_request' && always()
        run: |
          cd web
          rm -f .babelrc.js

      - name: Upload blob report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blob-report-${{ matrix.shard }}
          path: web/blob-report/
          retention-days: 1

  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge test reports
        run: |
          cd web
          npx playwright merge-reports --reporter=html ../all-blob-reports

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: web/playwright-report/
          retention-days: 30

  coverage:
    name: Code Coverage
    if: github.event_name == 'pull_request' && always()
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-coverage-data
          pattern: coverage-*
          merge-multiple: true

      - name: Merge coverage data and generate report
        working-directory: web
        run: |
          # Create local .nyc_output directory
          mkdir -p .nyc_output coverage

          # Check if we have coverage data from matrix runs
          if [ -d "../all-coverage-data" ] && [ "$(ls -A ../all-coverage-data 2>/dev/null)" ]; then
            echo "Found coverage data from matrix runs, merging..."

            # Copy all coverage files to local .nyc_output
            find ../all-coverage-data -name "*.json" -exec cp {} .nyc_output/ \;

            # Generate merged coverage reports
            npx nyc report --reporter=json-summary --reporter=lcov --reporter=html --report-dir=coverage

            if [ -f "coverage/coverage-summary.json" ]; then
              echo "Coverage merge successful, generating markdown report..."

              # Create markdown summary
              echo "# 📊 Code Coverage Report" > coverage-report.md
              echo "" >> coverage-report.md
              echo "_Generated from full test matrix execution_" >> coverage-report.md
              echo "" >> coverage-report.md
              echo "## Coverage Summary" >> coverage-report.md
              echo "" >> coverage-report.md

              # Parse coverage summary and create table
              node -e "
                const fs = require('fs');
                const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = summary.total;

                console.log('| Metric | Coverage | Covered/Total |');
                console.log('|--------|----------|---------------|');
                console.log(\`| **Statements** | \${total.statements.pct}% | \${total.statements.covered}/\${total.statements.total} |\`);
                console.log(\`| **Branches** | \${total.branches.pct}% | \${total.branches.covered}/\${total.branches.total} |\`);
                console.log(\`| **Functions** | \${total.functions.pct}% | \${total.functions.covered}/\${total.functions.total} |\`);
                console.log(\`| **Lines** | \${total.lines.pct}% | \${total.lines.covered}/\${total.lines.total} |\`);
              " >> coverage-report.md

              echo "" >> coverage-report.md
              echo "## Files with Highest Coverage" >> coverage-report.md
              echo "" >> coverage-report.md

              # List top files by coverage percentage
              node -e "
                const fs = require('fs');
                const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const files = Object.keys(summary)
                  .filter(key => key !== 'total')
                  .map(file => ({ file, cov: summary[file] }))
                  .filter(({ cov }) => cov.statements.total > 0)
                  .sort((a, b) => b.cov.statements.pct - a.cov.statements.pct)
                  .slice(0, 15);

                if (files.length === 0) {
                  console.log('No individual file coverage data available.');
                } else {
                  files.forEach(({ file, cov }) => {
                    console.log(\`- \\\`\${file}\\\` - \${cov.statements.pct}% statements (\${cov.statements.covered}/\${cov.statements.total})\`);
                  });

                  const totalFiles = Object.keys(summary).length - 1;
                  if (totalFiles > 15) {
                    console.log(\`\n... and \${totalFiles - 15} more files\`);
                  }
                }
              " >> coverage-report.md

            else
              echo "# 📊 Code Coverage Report" > coverage-report.md
              echo "" >> coverage-report.md
              echo "⚠️ Failed to generate merged coverage report." >> coverage-report.md
            fi

          else
            echo "# 📊 Code Coverage Report" > coverage-report.md
            echo "" >> coverage-report.md
            echo "⚠️ No coverage data found from test matrix execution." >> coverage-report.md
            echo "" >> coverage-report.md
            echo "This may be because:" >> coverage-report.md
            echo "- This is not a pull request (coverage only runs on PRs)" >> coverage-report.md
            echo "- Coverage instrumentation failed during test execution" >> coverage-report.md
            echo "- No JavaScript code was executed during tests" >> coverage-report.md
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            web/coverage/
            web/coverage-report.md
          retention-days: 30

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let coverageReport = '';
            try {
              coverageReport = fs.readFileSync('web/coverage-report.md', 'utf8');
            } catch (error) {
              coverageReport = '# Test Coverage Report\n\nNo coverage report generated.';
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find existing coverage comment
            const existingComment = comments.find(comment =>
              comment.body.includes('📊 Code Coverage Report') &&
              comment.user.type === 'Bot'
            );

            const commentBody = `${coverageReport}

            ---
            *Generated from Playwright e2e tests with JavaScript coverage collection.*`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  tests-passed:
    if: always()
    needs: [test, merge-reports, coverage]
    runs-on: ubuntu-latest
    name: Tests passed
    steps:
      - name: Check all jobs
        run: |
          # Check test and merge-reports (always required)
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.merge-reports.result }}" == "failure" ]]; then
            echo "❌ Tests failed"
            exit 1
          elif [[ "${{ needs.test.result }}" == "cancelled" || "${{ needs.merge-reports.result }}" == "cancelled" ]]; then
            echo "🟡 Tests cancelled"
            exit 1
          fi

          # Check coverage job only if it ran (for PRs)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ needs.coverage.result }}" == "failure" ]]; then
              echo "⚠️  Coverage job failed, but continuing"
              # Don't fail the entire workflow for coverage failures
            elif [[ "${{ needs.coverage.result }}" == "cancelled" ]]; then
              echo "🟡 Coverage cancelled"
              exit 1
            fi
          fi

          echo "✅ All tests passed"
